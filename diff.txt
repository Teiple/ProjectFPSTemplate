diff --git a/project.godot b/project.godot
index dc3d9d5..74bad4a 100644
--- a/project.godot
+++ b/project.godot
@@ -129,11 +129,6 @@ _global_script_classes=[ {
 "language": "GDScript",
 "path": "res://addons/qodot/example_scenes/2-miscallaneous/1-runtime-map-building/orbit_arm.gd"
 }, {
-"base": "CPUParticles",
-"class": "PausableParticles",
-"language": "GDScript",
-"path": "res://src/scripts/effects/pausable_particles.gd"
-}, {
 "base": "Menu",
 "class": "PauseMenu",
 "language": "GDScript",
@@ -404,7 +399,6 @@ _global_script_class_icons={
 "LoadingData": "",
 "Menu": "",
 "OrbitArm": "",
-"PausableParticles": "",
 "PauseMenu": "",
 "PhysicsBall": "",
 "PhysicsEntity": "",
@@ -487,8 +481,6 @@ enabled=PoolStringArray( "res://addons/debug_draw_3d/plugin.cfg", "res://addons/
 [global]
 
 window=false
-stdou=false
-stdout=false
 
 [gui]
 
@@ -603,11 +595,6 @@ quick_load={
 3d_physics/layer_4="StairProxy"
 3d_physics/layer_5="StairCollision"
 
-[network]
-
-limits/debugger_stdout/max_chars_per_second=10000
-limits/debugger_stdout/max_messages_per_frame=100
-
 [physics]
 
 common/enable_pause_aware_picking=true
diff --git a/src/blender/arms.blend b/src/blender/arms.blend
index 624ecd2..139bfc3 100644
Binary files a/src/blender/arms.blend and b/src/blender/arms.blend differ
diff --git a/src/blender/arms.blend1 b/src/blender/arms.blend1
index 3dec26e..33a4c42 100644
Binary files a/src/blender/arms.blend1 and b/src/blender/arms.blend1 differ
diff --git a/src/resources/player/player_pistol_state_machine.tres b/src/resources/player/player_pistol_state_machine.tres
index 15abcc2..aa1f8ad 100644
--- a/src/resources/player/player_pistol_state_machine.tres
+++ b/src/resources/player/player_pistol_state_machine.tres
@@ -84,4 +84,4 @@ states/reload/position = Vector2( 0, -100 )
 states/unequip/node = SubResource( 6 )
 states/unequip/position = Vector2( 0, 100 )
 transitions = [ "equip", "unequip", SubResource( 7 ), "equip", "idle", SubResource( 8 ), "equip", "fire", SubResource( 9 ), "equip", "reload", SubResource( 10 ), "unequip", "equip", SubResource( 11 ), "unequip", "idle", SubResource( 12 ), "unequip", "fire", SubResource( 13 ), "unequip", "reload", SubResource( 14 ), "idle", "equip", SubResource( 15 ), "idle", "unequip", SubResource( 16 ), "idle", "fire", SubResource( 17 ), "idle", "reload", SubResource( 18 ), "fire", "equip", SubResource( 19 ), "fire", "idle", SubResource( 20 ), "fire", "unequip", SubResource( 21 ), "fire", "reload", SubResource( 22 ), "fire", "fire_intermediate", SubResource( 23 ), "fire_intermediate", "fire", SubResource( 24 ), "reload", "idle", SubResource( 25 ), "reload", "equip", SubResource( 26 ), "reload", "unequip", SubResource( 27 ), "reload", "fire", SubResource( 28 ) ]
-graph_offset = Vector2( -433.791, -110 )
+graph_offset = Vector2( -422.791, 0 )
diff --git a/src/scenes/effects/decal_1.tscn b/src/scenes/effects/decal_1.tscn
index 584ba8a..05c75cf 100644
--- a/src/scenes/effects/decal_1.tscn
+++ b/src/scenes/effects/decal_1.tscn
@@ -6,7 +6,7 @@
 [ext_resource path="res://src/scripts/effects/decal.gd" type="Script" id=4]
 
 [sub_resource type="CubeMesh" id=6]
-size = Vector3( 0.2, 0.2, 0.2 )
+size = Vector3( 0.1, 0.1, 0.02 )
 
 [sub_resource type="ShaderMaterial" id=5]
 shader = ExtResource( 2 )
diff --git a/src/scenes/effects/impact_effect_1.tscn b/src/scenes/effects/impact_effect_1.tscn
index 97459b6..9013229 100644
--- a/src/scenes/effects/impact_effect_1.tscn
+++ b/src/scenes/effects/impact_effect_1.tscn
@@ -1,9 +1,33 @@
-[gd_scene load_steps=9 format=2]
+[gd_scene load_steps=11 format=2]
 
 [ext_resource path="res://src/scripts/effects/impact_effect.gd" type="Script" id=1]
 [ext_resource path="res://textures/effects/simple_effect_1.png" type="Texture" id=2]
 [ext_resource path="res://src/scenes/components/poolable_node_component.tscn" type="PackedScene" id=3]
-[ext_resource path="res://src/scripts/effects/pausable_particles.gd" type="Script" id=4]
+
+[sub_resource type="Gradient" id=4]
+offsets = PoolRealArray( 0, 0.0633803, 0.739437, 1 )
+colors = PoolColorArray( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 )
+
+[sub_resource type="GradientTexture" id=5]
+gradient = SubResource( 4 )
+width = 256
+
+[sub_resource type="Curve" id=6]
+_data = [ Vector2( 0, 1 ), 0.0, 0.0, 0, 0, Vector2( 1, 1 ), 0.0, 0.0, 0, 0 ]
+
+[sub_resource type="CurveTexture" id=7]
+curve = SubResource( 6 )
+
+[sub_resource type="ParticlesMaterial" id=3]
+lifetime_randomness = 1.0
+direction = Vector3( 0, 0, -1 )
+spread = 10.0
+initial_velocity = 5.0
+scale = 0.05
+scale_random = 0.1
+scale_curve = SubResource( 7 )
+color = Color( 0.427451, 0.427451, 0.427451, 1 )
+color_ramp = SubResource( 5 )
 
 [sub_resource type="SpatialMaterial" id=1]
 flags_transparent = true
@@ -18,33 +42,16 @@ albedo_texture = ExtResource( 2 )
 [sub_resource type="QuadMesh" id=2]
 material = SubResource( 1 )
 
-[sub_resource type="Curve" id=6]
-_data = [ Vector2( 0, 1 ), 0.0, 0.0, 0, 0, Vector2( 1, 1 ), 0.0, 0.0, 0, 0 ]
-
-[sub_resource type="Gradient" id=4]
-offsets = PoolRealArray( 0, 0.0633803, 0.739437, 1 )
-colors = PoolColorArray( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 )
-
 [node name="ImpactEffect1" type="Spatial"]
 script = ExtResource( 1 )
 
-[node name="Particles" type="CPUParticles" parent="."]
-emitting = false
-lifetime = 0.5
-one_shot = true
-explosiveness = 0.8
+[node name="Particles" type="Particles" parent="."]
+lifetime = 0.2
+speed_scale = 0.1
+explosiveness = 0.7
 randomness = 1.0
-lifetime_randomness = 1.0
-mesh = SubResource( 2 )
-direction = Vector3( 0, 0, -1 )
-spread = 10.0
-gravity = Vector3( 0, 0, 0 )
-initial_velocity = 1.0
-scale_amount = 0.05
-scale_amount_random = 0.1
-scale_amount_curve = SubResource( 6 )
-color = Color( 0.427451, 0.427451, 0.427451, 1 )
-color_ramp = SubResource( 4 )
-script = ExtResource( 4 )
+visibility_aabb = AABB( -1.11201, -1.32548, -1.98377, 2.20235, 2.36248, 2.98377 )
+process_material = SubResource( 3 )
+draw_pass_1 = SubResource( 2 )
 
 [node name="PoolableNodeComponent" parent="." instance=ExtResource( 3 )]
diff --git a/src/scenes/player/arms.tscn b/src/scenes/player/arms.tscn
index c959a17..1611da1 100644
--- a/src/scenes/player/arms.tscn
+++ b/src/scenes/player/arms.tscn
@@ -40,28 +40,18 @@ transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1.65, 0 )
 [node name="armature" parent="ViewModel" index="0"]
 transform = Transform( -1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, 0, 0 )
 
+[node name="Skeleton" parent="ViewModel/armature" index="0"]
+bones/29/bound_children = [ NodePath("Weapons") ]
+
 [node name="Weapons" type="BoneAttachment" parent="ViewModel/armature/Skeleton" index="1"]
-transform = Transform( 0.961344, -0.272257, 0.0411625, -0.0505844, -0.321569, -0.945534, 0.270665, 0.906901, -0.32291, -0.118104, 1.41678, 0.402097 )
+transform = Transform( 0.998417, -9.31323e-10, -0.0562501, -0.0255197, -0.891163, -0.452965, -0.050128, 0.453683, -0.889752, -0.247225, 1.00591, -0.0218807 )
 bone_name = "hand.R"
 
-[node name="Smg" parent="ViewModel/armature/Skeleton/Weapons" instance=ExtResource( 13 )]
-transform = Transform( -0.961474, -0.15163, -0.229294, 0.270137, -0.366644, -0.89028, 0.0509235, -0.917921, 0.39348, 0.00837651, 0.0388536, -0.10513 )
-visible = false
-__meta__ = {
-"_editor_description_": "Global Position: (-0.084, -0.228, 1.483)
-Global Rotation (Degrees): (-0.154, 2.788, 1.762)
-Global Scale: (1.000, 1.000, 1.000)
-"
-}
-
 [node name="Pistol" parent="ViewModel/armature/Skeleton/Weapons" instance=ExtResource( 3 )]
-transform = Transform( -0.96225, -0.0505844, -0.267425, 0.2692, -0.321569, -0.907813, -0.0400743, -0.945534, 0.323047, 0.0290166, 0.0849771, -0.0402087 )
-visible = false
-__meta__ = {
-"_editor_description_": "Global Position: (-0.115, -0.500, 1.426)
-Global Rotation (Degrees): (0.000, -0.000, -0.000)
-Global Scale: (1.000, 1.000, 1.000)"
-}
+transform = Transform( -0.96225, -0.0505844, -0.267425, 0.2692, -0.321569, -0.907813, -0.0400743, -0.945534, 0.323047, 0.029523, 0.0853769, -0.0441822 )
+
+[node name="Smg" parent="ViewModel/armature/Skeleton/Weapons" instance=ExtResource( 13 )]
+transform = Transform( -0.950704, -0.198832, -0.237964, 0.296236, -0.355463, -0.886505, 0.0916787, -0.913297, 0.396841, 0.00493299, 0.051854, -0.105 )
 
 [node name="AnimationOverride" type="Node" parent="."]
 script = ExtResource( 8 )
diff --git a/src/scenes/player/player.tscn b/src/scenes/player/player.tscn
index c798d8f..baa1690 100644
--- a/src/scenes/player/player.tscn
+++ b/src/scenes/player/player.tscn
@@ -1,10 +1,11 @@
-[gd_scene load_steps=11 format=2]
+[gd_scene load_steps=12 format=2]
 
 [ext_resource path="res://src/scripts/player/player.gd" type="Script" id=1]
 [ext_resource path="res://src/scenes/player/arms.tscn" type="PackedScene" id=2]
 [ext_resource path="res://src/scenes/player/player_hud.tscn" type="PackedScene" id=3]
 [ext_resource path="res://src/shaders/decal_fade.tres" type="Shader" id=4]
 [ext_resource path="res://textures/effects/simple_effect_1.png" type="Texture" id=5]
+[ext_resource path="res://src/resources/player/view_model_override_animation_player.scn" type="PackedScene" id=6]
 [ext_resource path="res://src/scenes/components/game_state_component.tscn" type="PackedScene" id=7]
 
 [sub_resource type="CapsuleShape" id=1]
@@ -56,5 +57,7 @@ transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, -1.7
 mesh = SubResource( 3 )
 material/0 = SubResource( 4 )
 
+[node name="AnimationPlayer" parent="." instance=ExtResource( 6 )]
+
 [node name="GameStateComponent" parent="." instance=ExtResource( 7 )]
 save_section_id = 1
diff --git a/src/scenes/pools/default_bullet_hole_decal_pool.tscn b/src/scenes/pools/default_bullet_hole_decal_pool.tscn
index b0cd92e..c58bf1a 100644
--- a/src/scenes/pools/default_bullet_hole_decal_pool.tscn
+++ b/src/scenes/pools/default_bullet_hole_decal_pool.tscn
@@ -1,8 +1,7 @@
-[gd_scene load_steps=4 format=2]
+[gd_scene load_steps=3 format=2]
 
 [ext_resource path="res://src/scripts/pool.gd" type="Script" id=1]
 [ext_resource path="res://src/scenes/effects/decal_1.tscn" type="PackedScene" id=2]
-[ext_resource path="res://src/scenes/components/game_state_component.tscn" type="PackedScene" id=3]
 
 [node name="DefaultBulletHoleDecalPool" type="Node"]
 script = ExtResource( 1 )
@@ -10,6 +9,3 @@ max_pool_size = 10
 source_scenes = [ ExtResource( 2 ) ]
 pool_category = 2
 reusable = true
-
-[node name="GameStateComponent" parent="." instance=ExtResource( 3 )]
-save_section_id = 2
diff --git a/src/scenes/pools/default_impact_effect_pool.tscn b/src/scenes/pools/default_impact_effect_pool.tscn
index 9923b72..0b64b1e 100644
--- a/src/scenes/pools/default_impact_effect_pool.tscn
+++ b/src/scenes/pools/default_impact_effect_pool.tscn
@@ -6,7 +6,7 @@
 
 [node name="DefaultImpactEffectPool" type="Node"]
 script = ExtResource( 1 )
-max_pool_size = 40
+max_pool_size = 20
 source_scenes = [ ExtResource( 2 ) ]
 pool_category = 3
 
diff --git a/src/scenes/world.tscn b/src/scenes/world.tscn
index c105d18..81ade70 100644
--- a/src/scenes/world.tscn
+++ b/src/scenes/world.tscn
@@ -1,10 +1,11 @@
-[gd_scene load_steps=34 format=2]
+[gd_scene load_steps=35 format=2]
 
 [ext_resource path="res://src/scenes/player/player.tscn" type="PackedScene" id=1]
 [ext_resource path="res://addons/qodot/src/nodes/qodot_map.gd" type="Script" id=2]
 [ext_resource path="res://addons/qodot/game_definitions/fgd/qodot_fgd.tres" type="Resource" id=3]
 [ext_resource path="res://textures/tiny_texture_pack/Grass/Grass_14_-_128x128.png" type="Texture" id=4]
 [ext_resource path="res://textures/tiny_texture_pack/Bricks/Brick_12_-_128x128.png" type="Texture" id=5]
+[ext_resource path="res://src/scenes/effects/decal_1.tscn" type="PackedScene" id=6]
 [ext_resource path="res://addons/qodot/game_definitions/fgd/solid_classes/stair_collision_solid_class.gd" type="Script" id=7]
 [ext_resource path="res://textures/tiny_texture_pack/Bricks/Brick_10_-_128x128.png" type="Texture" id=8]
 [ext_resource path="res://addons/qodot/game_definitions/fgd/solid_classes/stair_proxy_solid_class.gd" type="Script" id=9]
@@ -235,3 +236,18 @@ shape = SubResource( 220 )
 
 [node name="OmniLight" type="OmniLight" parent="."]
 transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.815576, 1.40436, -2.42961 )
+
+[node name="Decal1" parent="." instance=ExtResource( 6 )]
+transform = Transform( -4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, -0.0121097, 1.0803, 0.0701823 )
+
+[node name="MeshInstance" parent="Decal1" index="0"]
+transform = Transform( 1, 0, 0, 0, -1, -1.50996e-07, 0, 1.50996e-07, -1, -0.0240576, 0.00215554, -0.001344 )
+
+[node name="Decal2" parent="." instance=ExtResource( 6 )]
+transform = Transform( -4.37114e-08, -1, -4.37114e-08, 0, -4.37114e-08, 1, -1, 4.37114e-08, 1.91069e-15, -0.439138, 0.0193655, 0.0982758 )
+
+[node name="MeshInstance" parent="Decal2" index="0"]
+transform = Transform( 1, 0, 0, 0, -1, -1.50996e-07, 0, 1.50996e-07, -1, 0.0217829, 0.00215554, -0.001344 )
+
+[editable path="Decal1"]
+[editable path="Decal2"]
diff --git a/src/scripts/autoload/global.gd b/src/scripts/autoload/global.gd
index ce65ed7..3fee2dd 100644
--- a/src/scripts/autoload/global.gd
+++ b/src/scripts/autoload/global.gd
@@ -114,19 +114,7 @@ func quit(exit_code : int = -1):
 
 func set_tree_pause(paused : bool):
 	get_tree().paused = paused
-	# Set pausing for particles
-	for particles in get_tree().get_nodes_in_group(GlobalData.Group.PARTICLES):
-		particles = particles as PausableParticles
-		if particles == null:
-			return
-		if paused:
-			particles.pause()
-		else:
-			particles.unpause()
-
 
-func is_tree_paused() -> bool:
-	return get_tree().paused
 
 func save_everything():
 	var saveables = get_tree().get_nodes_in_group(GlobalData.Group.SAVEABLE)
@@ -157,10 +145,6 @@ func save_everything():
 
 
 func load_everything():
-	if Global.is_tree_paused():
-		push_error("Cannot load while the game is paused. Deserialization may immediately return nodes without a frame delay and causes reuse conflicts.")
-		return
-	
 	var saveables = get_tree().get_nodes_in_group(GlobalData.Group.SAVEABLE)
 	var save = GameState.load_save(GameState.SLOT_LATEST)
 	
diff --git a/src/scripts/autoload/pause_menu.gd b/src/scripts/autoload/pause_menu.gd
index 34ebfdd..5c67996 100644
--- a/src/scripts/autoload/pause_menu.gd
+++ b/src/scripts/autoload/pause_menu.gd
@@ -43,8 +43,7 @@ func _on_save_button_pressed():
 
 
 func _on_load_button_pressed():
-	Global.call_deferred("load_everything")
-	back()
+	Global.load_everything()
 
 
 func _on_quit_button_pressed():
diff --git a/src/scripts/data/global_data.gd b/src/scripts/data/global_data.gd
index 4732ac1..e0bd683 100644
--- a/src/scripts/data/global_data.gd
+++ b/src/scripts/data/global_data.gd
@@ -37,7 +37,6 @@ enum MenuPauseOption {
 
 class Group:
 	const SAVEABLE := "saveable"
-	const PARTICLES := "particles"
 
 
 enum SaveSectionId {
diff --git a/src/scripts/effects/decal.gd b/src/scripts/effects/decal.gd
index 3c2c42a..3e315e5 100644
--- a/src/scripts/effects/decal.gd
+++ b/src/scripts/effects/decal.gd
@@ -8,25 +8,10 @@ onready var poolable_node_component : PoolableNodeComponent = $PoolableNodeCompo
 var _start_time : float = 0.0
 
 
-func _ready():
-	poolable_node_component.init_serialization_func(funcref(self, "serialize"))
-	poolable_node_component.init_deserialization_func(funcref(self, "deserialize"))
-
-
-func serialize() -> Dictionary:
-	return {
-		"global_transform": var2str(global_transform),
-	}
-
-
-func deserialize(data : Dictionary):
-	global_transform = Utils.either(str2var(data.get("global_transform")), global_transform)
-	_start_time = FrameTime.process_time()
-
-
 func set_up(position : Vector3, normal : Vector3):
 	global_transform = Transform.IDENTITY
 	global_position = position
+	
 	var dot = Vector3.UP.dot(normal)
 	if abs(dot) > 0.95:
 		if dot > 0:
diff --git a/src/scripts/effects/impact_effect.gd b/src/scripts/effects/impact_effect.gd
index 153df69..a786286 100644
--- a/src/scripts/effects/impact_effect.gd
+++ b/src/scripts/effects/impact_effect.gd
@@ -1,45 +1,46 @@
 class_name ImpactEffect
 extends Spatial
 
+const LIFE_TIME_OFFSET := 1.0
+
+export var one_shot : bool = true
+
 onready var poolable_node_component : PoolableNodeComponent = $PoolableNodeComponent
-onready var particles : PausableParticles = $Particles
+onready var particles : Particles = $Particles
+
+var _start_time : float = 0.0
+var _life_time : float = 0.0
+var _normal : Vector3 = Vector3.ZERO
 
 func _ready():
+	particles.one_shot = one_shot
 	poolable_node_component.init_serialization_func(funcref(self, "serialize"))
 	poolable_node_component.init_deserialization_func(funcref(self, "deserialize"))
 
 
 func serialize() -> Dictionary:
 	return {
-		"global_position": var2str(global_transform),
-		"is_emitting": particles.get_is_emitting(),
-		"last_restart_offset": FrameTime.process_time() - particles.get_last_restart(),
+		"position": var2str(global_position),
+		"normal": var2str(_normal),
 	}
 
 
 func deserialize(data : Dictionary):
-	global_transform = Utils.either(str2var(data.get("global_position")), global_transform)
-	
-	var is_emitting = data.get("is_emitting", false)
-	
-	particles.set_is_emitting(is_emitting)
-	if !is_emitting:
-		poolable_node_component.return_to_pool()
-		return
-	
-	var last_restart = FrameTime.process_time() - max(data.get("last_restart_offset", 0.0), 0.0)
-	particles.set_last_restart(last_restart)
-	particles.trigger_restart(true)
+	var pos = Utils.either(str2var(data.get("position")), global_position)
+	var normal = Utils.either(str2var(data.get("normal")), _normal)
+	set_up(pos, normal)
 
 
 func _process(delta):
-	if !particles.get_is_emitting():
+	if FrameTime.process_time() - _start_time >= _life_time:
+		particles.emitting = false
 		poolable_node_component.return_to_pool()
 
 
 func set_up(position : Vector3, normal : Vector3):
 	global_transform = Transform.IDENTITY
 	global_position = position
+	_normal = normal
 	
 	var dot = Vector3.UP.dot(normal)
 	if abs(dot) > 0.95:
@@ -50,4 +51,6 @@ func set_up(position : Vector3, normal : Vector3):
 	else:
 		look_at(position + normal, Vector3.UP)
 	
-	particles.trigger_restart()
+	particles.restart()
+	_life_time = particles.lifetime / particles.speed_scale  + LIFE_TIME_OFFSET
+	_start_time = FrameTime.process_time()
diff --git a/src/scripts/effects/pausable_particles.gd b/src/scripts/effects/pausable_particles.gd
deleted file mode 100644
index fb3bb5b..0000000
--- a/src/scripts/effects/pausable_particles.gd
+++ /dev/null
@@ -1,57 +0,0 @@
-class_name PausableParticles
-extends CPUParticles
-
-const LIFE_TIME_OFFSET := 0.1
-
-var _last_restart := 0.0
-var _is_emitting := false
-
-
-func _ready():
-	one_shot = true
-	add_to_group(GlobalData.Group.PARTICLES)
-
-
-func pause():
-	speed_scale = 0.0
-
-
-func unpause():
-	speed_scale = 1.0
-
-
-func trigger_restart(should_preprocess : bool = false):
-	if should_preprocess:
-		preprocess = FrameTime.process_time() - _last_restart
-	else:
-		preprocess = 0.0
-	_last_restart = FrameTime.process_time()
-	_is_emitting = true
-	set_process(true)
-	restart()
-
-
-func set_last_restart(val : float):
-	_last_restart = val
-
-
-func get_last_restart() -> float:
-	return _last_restart
-
-
-func _process(delta):
-	if FrameTime.process_time() - _last_restart >= get_life_time():
-		_is_emitting = false
-		set_process(false)
-
-
-func get_is_emitting() -> bool:
-	return _is_emitting
-
-
-func set_is_emitting(val : bool):
-	_is_emitting = val
-
-
-func get_life_time():
-	return lifetime + LIFE_TIME_OFFSET
diff --git a/src/scripts/player/view_model_action_controller.gd b/src/scripts/player/view_model_action_controller.gd
index 811af67..acdac59 100644
--- a/src/scripts/player/view_model_action_controller.gd
+++ b/src/scripts/player/view_model_action_controller.gd
@@ -40,7 +40,7 @@ func _process(delta):
 	var short_press = FrameTime.process_time() - _start_press_time < _weapon_controller.get_current_weapon_fire_rate()
 	
 	# Rapid fire - fire without cool down due to fire rate
-	if Input.is_action_just_released("fire") && short_press && _weapon_controller.check_and_handle_rapid_fire_attempt():
+	if Input.is_action_just_released("fire") && short_press && _weapon_controller.can_rapid_fire_or_play_empty_click():
 		# Must mark before fire event
 		_weapon_controller.mark_fire()
 		_trigger_event("fire")
@@ -48,13 +48,16 @@ func _process(delta):
 	
 	# Reset _start_press_time when player finishes hold-firing
 	if Input.is_action_just_released("fire"):
+		print_debug("hi")
 		_start_press_time = 0.0
 	
-	if Input.is_action_pressed("fire") && !short_press && _weapon_controller.check_and_handle_fire_attempt():
-		# Must mark before fire event. Or else pressing triggers will overlap and anitiomation will always be stuck at the start
-		_weapon_controller.mark_fire()
-		_trigger_event("fire")
-		return
+	if Input.is_action_pressed("fire"):
+		if !short_press:
+			if _weapon_controller.can_fire_or_play_empty_click():
+				# Must mark before fire event. Or else pressing triggers will overlap and anitiomation will always be stuck at the start
+				_weapon_controller.mark_fire()
+				_trigger_event("fire")
+				return
 	
 	if Input.is_action_pressed("reload") && _weapon_controller.can_reload():
 		_trigger_event("reload")
diff --git a/src/scripts/player/weapon_action_controller.gd b/src/scripts/player/weapon_action_controller.gd
index 0b056f8..bbc0d71 100644
--- a/src/scripts/player/weapon_action_controller.gd
+++ b/src/scripts/player/weapon_action_controller.gd
@@ -11,6 +11,20 @@ func _ready():
 	_weapon_controller = get_node(weapon_controller_path)
 
 
+func __set_transition(from : String, to : String):
+	var animation_tree = _weapon_controller.get_current_weapon_animation_tree()
+	if animation_tree == null:
+		return
+	var playback_path = "parameters/playback"
+	var playback : AnimationNodeStateMachinePlayback = animation_tree[playback_path] as AnimationNodeStateMachinePlayback
+	#if playback.get_current_node() != from:
+	#	push_warning("Weapon animation is out of sync: View model: %s; Weapon: %s" % [from, playback.get_current_node()])
+	if from == to:
+		playback.travel(from + "_intermediate")
+	else:
+		playback.travel(to)
+
+
 func set_travel_to_state(to : String):
 	var animation_tree = _weapon_controller.get_current_weapon_animation_tree()
 	if animation_tree == null:
diff --git a/src/scripts/player/weapon_controller.gd b/src/scripts/player/weapon_controller.gd
index 9b1e6a7..90e0cc7 100644
--- a/src/scripts/player/weapon_controller.gd
+++ b/src/scripts/player/weapon_controller.gd
@@ -86,17 +86,14 @@ func get_current_weapon_id() -> String:
 
 
 # Rapid fire will ignore firerate and fire whenever it is possible
-func check_and_handle_rapid_fire_attempt() -> bool:
+func can_rapid_fire_or_play_empty_click() -> bool:
 	if _current_weapon == null || !_current_weapon.get_weapon_stats().allow_rapid_fire:
 		return false
 	# Player usually fires their last shot and continues spamming the fire button.
 	# This prevents playing the empty click sound right before auto-reload.
 	var can_auto_reload = _can_auto_reload_now()
-	if _current_weapon.get_current_ammo() == 0:
-		if !can_auto_reload:
-			_current_weapon.play_empty_click()
-		else:
-			emit_signal("auto_reload_requested")
+	if _current_weapon.get_current_ammo() == 0 && !can_auto_reload:
+		_current_weapon.play_empty_click()
 		return false
 	
 	if can_auto_reload:
@@ -235,17 +232,14 @@ func _can_auto_reload_now() -> bool:
 
 
 # Check if weapon is ready to fire, if weapon has no ammo, an empty click sound is played 
-func check_and_handle_fire_attempt() -> bool:
+func can_fire_or_play_empty_click() -> bool:
 	if _current_weapon == null || !is_current_weapon_firing_cool_down_over():
 		return false
 	# Player usually fires their last shot and continues spamming the fire button.
 	# This prevents playing the empty click sound right before auto-reload.
 	var can_auto_reload = _can_auto_reload_now()
-	if _current_weapon.get_current_ammo() == 0:
-		if !can_auto_reload:
-			_current_weapon.play_empty_click()
-		else:
-			emit_signal("auto_reload_requested")
+	if _current_weapon.get_current_ammo() == 0 && !can_auto_reload:
+		_current_weapon.play_empty_click()
 		return false
 	
 	if can_auto_reload:
diff --git a/src/scripts/pool.gd b/src/scripts/pool.gd
index 19e66e4..774a534 100644
--- a/src/scripts/pool.gd
+++ b/src/scripts/pool.gd
@@ -52,7 +52,7 @@ func _on_return_requested(node : Node, poolable_node_component : PoolableNodeCom
 		return
 	
 	if !is_instance_valid(node) || !is_instance_valid(poolable_node_component):
-		push_error("how could this happen?")
+		push_error("how could these happen?")
 		return
 	
 	if _pool.has(poolable_node_component):
@@ -89,7 +89,7 @@ func take_from_pool(method : String = "", binds : Array = [], out_poolable_comp
 	var new_node = false
 	# Create new node if the pool is empty/depleted 
 	if _pool.size() == 0:
-		if reusable && _in_use.size() == max_pool_size && _first_in_use_node_valid_or_pop_front():
+		if reusable && _in_use.size() > 0 && _first_in_use_node_valid_or_pop_front():
 			var least_recently_used = _in_use.pop_front()
 			poolable_node_component = least_recently_used
 			_hits += 1
@@ -101,9 +101,9 @@ func take_from_pool(method : String = "", binds : Array = [], out_poolable_comp
 	else:
 		if !_back_pool_node_valid_or_pop_back():
 			# This shouldn't happen. The way it could happen
-			# is to have a "sleeping" pooled node destroyed itself,
+			# is to have "sleeping" pooled node destroyed itself,
 			# which I didn't remember being done to any of the pooled node
-			print_debug("how could this happen?")
+			print_debug("how could these happen?")
 			return null
 		poolable_node_component = _pool.pop_back()
 		_hits += 1
@@ -189,11 +189,8 @@ func deserialize_state(state : Dictionary):
 	var active_nodes = state.get("active_nodes", [])
 	if !(active_nodes is Array):
 		return
-	
 	_free_all_in_use()
 	
-	var poolable_arr : Dictionary = {}
-	
 	for i in active_nodes.size():
 		var out_poolable_node_comp : Array = []
 		take_from_pool("", [], out_poolable_node_comp)
@@ -202,12 +199,7 @@ func deserialize_state(state : Dictionary):
 		var poolable_node_comp = out_poolable_node_comp[0]
 		if poolable_node_comp == null:
 			continue
-		
-		# Deserialization must be done later to not conflict with take_from_pool()
-		poolable_arr[poolable_node_comp] = active_nodes[i]
-	
-	for poolable in poolable_arr:
-		poolable.deserialize(poolable_arr[poolable])
+		poolable_node_comp.deserialize(active_nodes[i])
 
 
 func get_info_str() -> String:
diff --git a/src/scripts/weapon.gd b/src/scripts/weapon.gd
index 25ad497..51e7df4 100644
--- a/src/scripts/weapon.gd
+++ b/src/scripts/weapon.gd
@@ -83,11 +83,11 @@ func get_last_fire() -> float:
 
 func serialize_state() -> Dictionary:
 	return {
-		"last_fire_offset" : FrameTime.process_time() - _last_fire,
+		"last_fire" : _last_fire,
 		"current_ammo" : current_ammo
 	}
 
 
 func deserialize_state(state : Dictionary):
-	_last_fire = FrameTime.process_time() - max(state.get("last_fire_offset", 0.0), 0.0)
+	_last_fire = state.get("last_fire", -1.0)
 	current_ammo = state.get("current_ammo", 0)
